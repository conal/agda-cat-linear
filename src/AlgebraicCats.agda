{-# OPTIONS --without-K --safe #-}

-- Algebraic categories via homomorphisms and SubCat structures

open import Level

module AlgebraicCats (c ‚Ñì : Level) where

open import Algebra.Bundles
open import Algebra.Module.Bundles

open import Categories.Category.Core

private variable r ‚Ñìr s ‚Ñìs : Level

module _ where
  open import Categories.Category.Instance.Setoids using (Setoids)
  open import Category.Sub (Setoids c ‚Ñì) as Sub using (_‚à©_; ‚ãÇ) -- renaming (SubCat.SubCategory to ‚ü®_‚ü©)
  open Sub.SubCat renaming (SubCategory to ‚ü®_‚ü©)
  import Category.Homomorphisms as H

  -- Temporarily comment out most categories to speed up reloading
{-
  Magmas          = ‚ü® H‚ÇÇ _‚àô_                    ‚ü© where open Magma          ; open H setoid
  Monoids         = ‚ü® H‚ÇÇ _‚àô_ ‚à© H‚ÇÄ Œµ             ‚ü© where open Monoid         ; open H setoid
  Groups          = ‚ü® H‚ÇÇ _‚àô_ ‚à© H‚ÇÄ Œµ ‚à© H‚ÇÅ _‚Åª¬π    ‚ü© where open Group          ; open H setoid
  Lattices        = ‚ü® H‚ÇÇ _‚à®_ ‚à© H‚ÇÇ _‚àß_           ‚ü© where open Lattice        ; open H setoid
  NearSemirings   = ‚ü® H‚ÇÇ _*_ ‚à© H‚ÇÇ _+_ ‚à© H‚ÇÄ 0#   ‚ü© where open NearSemiring   ; open H setoid
  Rings           = ‚ü® H‚ÇÇ _*_ ‚à© H‚ÇÇ _+_ ‚à© H‚ÇÅ (-_) ‚ü© where open Ring           ; open H setoid
  BooleanAlgebras = ‚ü® H‚ÇÇ _‚à®_ ‚à© H‚ÇÇ _‚àß_ ‚à© H‚ÇÅ ¬¨_   ‚ü© where open BooleanAlgebra ; open H setoid
 -}

  SemiringWithoutAnnihilatingZeros = ‚ü® H‚ÇÇ _*_ ‚à© H‚ÇÇ _+_ ‚à© H‚ÇÄ 0# ‚à© H‚ÇÄ 1# ‚ü©
    where open SemiringWithoutAnnihilatingZero ; open H setoid

  module _ (R : Semiring r ‚Ñìr) where
    open Semiring R
    LeftSemimodules = ‚ü® H‚ÇÇ _+·¥π_ ‚à© H‚ÇÄ 0·¥π ‚à© H‚Çó _*‚Çó_ ‚ü©
      where open LeftSemimodule {semiring = R} ; open H ‚âà·¥π-setoid ; open Action Carrier
{-
    RightSemimodules = ‚ü® H‚ÇÇ _+·¥π_ ‚à© H‚ÇÄ 0·¥π ‚à© H·µ£ _*·µ£_ ‚ü©
      where open RightSemimodule {semiring = R} ; open H ‚âà·¥π-setoid ; open Action Carrier

  module _ (R : Ring r ‚Ñìr) where
    open Ring R
    LeftModules  = ‚ü® H‚ÇÇ _+·¥π_ ‚à© H‚ÇÄ 0·¥π ‚à© H‚Çó _*‚Çó_ ‚ü©
      where open LeftModule  {ring = R} ; open H ‚âà·¥π-setoid ; open Action Carrier
    RightModules = ‚ü® H‚ÇÇ _+·¥π_ ‚à© H‚ÇÄ 0·¥π ‚à© H·µ£ _*·µ£_ ‚ü©
      where open RightModule {ring = R} ; open H ‚âà·¥π-setoid ; open Action Carrier

  module _ (R : Semiring r ‚Ñìr) (S : Semiring s ‚Ñìs) where
    open Semiring R renaming (Carrier to setoid‚Çó)
    open Semiring S renaming (Carrier to setoid·µ£)
    Bisemimodules = ‚ü® H‚ÇÇ _+·¥π_ ‚à© H‚ÇÄ 0·¥π ‚à© H‚Çó _*‚Çó_ ‚à© H·µ£ _*·µ£_ ‚ü©
      where open Bisemimodule {R-semiring = R} {S-semiring = S} ; open H ‚âà·¥π-setoid
            open Action setoid‚Çó using (H‚Çó)
            open Action setoid·µ£ using (H·µ£)

  module _ (R : Ring r ‚Ñìr) (S : Ring s ‚Ñìs) where
    open Ring R renaming (Carrier to setoid‚Çó)
    open Ring S renaming (Carrier to setoid·µ£)
    Bimodules = ‚ü® H‚ÇÇ _+·¥π_ ‚à© H‚ÇÄ 0·¥π ‚à© H‚Çó _*‚Çó_ ‚à© H·µ£ _*·µ£_ ‚ü©
      where open Bimodule {R-ring = R} {S-ring = S} ; open H ‚âà·¥π-setoid
            open Action setoid‚Çó using (H‚Çó)
            open Action setoid·µ£ using (H·µ£)

  module _ (R : CommutativeSemiring r ‚Ñìr) where
    open CommutativeSemiring R
    Semimodules = ‚ü® H‚ÇÇ _+·¥π_ ‚à© H‚ÇÄ 0·¥π ‚à© H‚Çó _*‚Çó_ ‚à© H·µ£ _*·µ£_ ‚ü©
      where open Semimodule {commutativeSemiring = R} ; open H ‚âà·¥π-setoid
            open Action Carrier

  module _ (R : CommutativeRing r ‚Ñìr) where
    open CommutativeRing R
    Modules = ‚ü® H‚ÇÇ _+·¥π_ ‚à© H‚ÇÄ 0·¥π ‚à© H‚Çó _*‚Çó_ ‚à© H·µ£ _*·µ£_ ‚ü©
      where open Module {commutativeRing = R} ; open H ‚âà·¥π-setoid ; open Action Carrier
-}

module _ where
  open import Category.Sub using () renaming (FullSubCategory to _‚á∞_)
 
{-
  Semigroups                     = Magmas        ‚á∞ Semigroup.magma
  Bands                          = Magmas        ‚á∞ Band.magma
  CommutativeSemigroups          = Magmas        ‚á∞ CommutativeSemigroup.magma
  Semilattices                   = Magmas        ‚á∞ Semilattice.magma
  SelectiveMagmas                = Magmas        ‚á∞ SelectiveMagma.magma
  CommutativeMonoids             = Monoids       ‚á∞ CommutativeMonoid.monoid
  BoundedLattices                = Monoids       ‚á∞ BoundedLattice.monoid
  IdempotentCommutativeMonoids   = Monoids       ‚á∞ IdempotentCommutativeMonoid.monoid
  AbelianGroups                  = Groups        ‚á∞ AbelianGroup.group
  DistributiveLattices           = Lattices      ‚á∞ DistributiveLattice.lattice
  SemiringWithoutOnes            = NearSemirings ‚á∞ SemiringWithoutOne.nearSemiring
  CommutativeSemiringWithoutOnes = NearSemirings ‚á∞ CommutativeSemiringWithoutOne.nearSemiring
  CommutativeRings               = Rings         ‚á∞ CommutativeRing.ring
-}

  Semirings = SemiringWithoutAnnihilatingZeros ‚á∞ Semiring.semiringWithoutAnnihilatingZero
  CommutativeSemirings = SemiringWithoutAnnihilatingZeros
                           ‚á∞ CommutativeSemiring.semiringWithoutAnnihilatingZero


-------------------------------------------------------------------------------
-- | Cartesian categories. Start with a few, and then generalize.
-------------------------------------------------------------------------------

module _ (R : Semiring r ‚Ñìr) where
  open Semiring R using (Carrier)
  -- open import Function using (const)
  open import Data.Unit.Polymorphic
  open import Data.Product using (_,_)
  open import Relation.Binary.Bundles using (Setoid)
  import Algebra.Module.Construct.Zero as Z
  import Algebra.Module.Construct.DirectProduct    as P

  open import Categories.Category.Cartesian
  open import Categories.Category.Monoidal.Instance.Setoids
  open import Categories.Category.Instance.Setoids using (Setoids)

  open import Category.Sub (Setoids c ‚Ñì) using (_‚à©_; ‚ãÇ)
  open import Cartesian.Sub (Setoids-CartesianCategory c ‚Ñì) as Sub hiding (_‚à©_)
  open Sub.SubCart using (SubCartesian)
  import Category.Homomorphisms as H
  open import Misc
  
  setoid = LeftSemimodule.‚âà·¥π-setoid {semiring = R}
  lsm = LeftSemimodules R

  open import Relation.Binary.PropositionalEquality using (_‚â°_)
  LeftSemimodule-CartOps : Ops setoid
  LeftSemimodule-CartOps = record 
    { ‚ä§·¥µ = Z.leftSemimodule
    ; ‚ä§‚â° = refl
    ; _√ó·¥µ_ = P.leftSemimodule
    ; √ó‚â° = refl
    } where open _‚â°_

  LeftSemimodules-Cartesian : Cartesian lsm
  LeftSemimodules-Cartesian = SubCartesian {ops = LeftSemimodule-CartOps} record
    { subCat = subCat
    ; R! = (Œª _ _ ‚Üí tt) , tt , (Œª _ _ ‚Üí tt)
    ; RœÄ‚ÇÅ = Œª {a‚ÇÅ a‚ÇÇ} ‚Üí let open Setoid (‚âà·¥π-setoid a‚ÇÅ) in
                          (Œª _ _ ‚Üí refl) , refl , (Œª _ _ ‚Üí refl)
    ; RœÄ‚ÇÇ = Œª {a‚ÇÅ a‚ÇÇ} ‚Üí let open Setoid (‚âà·¥π-setoid a‚ÇÇ) in
                          (Œª _ _ ‚Üí refl) , refl , (Œª _ _ ‚Üí refl)
    ; R‚ü®_,_‚ü© = Œª (_+‚ÇÅ_ , 0‚ÇÅ , _*‚ÇÅ_) (_+‚ÇÇ_ , 0‚ÇÇ , _*‚ÇÇ_) ‚Üí
                 (Œª x y ‚Üí x +‚ÇÅ y , x +‚ÇÇ y) , (0‚ÇÅ , 0‚ÇÇ) , (Œª s x ‚Üí s *‚ÇÅ x , s *‚ÇÇ x)
    } where
        open LeftSemimodule {semiring = R} ; open H ‚âà·¥π-setoid ; open Action Carrier
        subCat = H‚ÇÇ _+·¥π_ ‚à© H‚ÇÄ 0·¥π ‚à© H‚Çó _*‚Çó_

  -- For Cocartesian, Bicartesian, and Biproduct, use the Cartesian-to-Biproduct
  -- construction.

  open import Categories.Category.Cocartesian 
  open import Categories.Object.Initial

  open import Function.Equality
  open import Relation.Binary.Reasoning.MultiSetoid

  open import Biproduct lsm
  open LeftSemimodule using (‚âà·¥π-sym; ‚âà·¥π-refl)

  LSM-Preadditive : Preadditive
  LSM-Preadditive = record
    { _‚äπ_ = Œª {A B} (f‚Ä≤ , f+ , f0 , f*) (g‚Ä≤ , g+ , g0 , g*) ‚Üí
       let open Œ† f‚Ä≤ renaming (_‚ü®$‚ü©_ to f ; cong to f-cong)
           open Œ† g‚Ä≤ renaming (_‚ü®$‚ü©_ to g ; cong to g-cong)
           module A = LeftSemimodule A
           module B = LeftSemimodule B
       in record
         { _‚ü®$‚ü©_ = Œª x ‚Üí f x B.+·¥π g x
         ; cong = Œª {x y} x‚âày ‚Üí
             begin‚ü® B.‚âà·¥π-setoid ‚ü©
               f x B.+·¥π g x  ‚âà‚ü® B.+·¥π-cong (f-cong x‚âày) (g-cong x‚âày) ‚ü©
               f y B.+·¥π g y  ‚àé
         }
        , (Œª x y ‚Üí
             -- (f + g) (x+y) ‚âà (f + g) x + (f + g) y
             begin‚ü® B.‚âà·¥π-setoid ‚ü©
               f (x A.+·¥π y) B.+·¥π g (x A.+·¥π y)
                 ‚âà‚ü® B.+·¥π-cong (f+ x y) (g+ x y) ‚ü©
               (f x B.+·¥π f y) B.+·¥π (g x B.+·¥π g y)
                 ‚âàÀò‚ü® B.+·¥π-assoc (f x B.+·¥π f y) (g x) (g y) ‚ü©
               ((f x B.+·¥π f y) B.+·¥π g x) B.+·¥π g y
                 ‚âà‚ü® B.+·¥π-cong ≥ (B.+·¥π-assoc (f x) (f y) (g x)) ‚ü©
               (f x B.+·¥π (f y B.+·¥π g x)) B.+·¥π g y
                 -- The only use of commutativity!
                 ‚âà‚ü® B.+·¥π-cong ≥ (B.+·¥π-congÀ° (B.+·¥π-comm (f y) (g x))) ‚ü©
               (f x B.+·¥π (g x B.+·¥π f y)) B.+·¥π g y
                 ‚âàÀò‚ü® B.+·¥π-cong ≥ (B.+·¥π-assoc (f x) (g x) (f y)) ‚ü©
               ((f x B.+·¥π g x) B.+·¥π f y) B.+·¥π g y
                 ‚âà‚ü® B.+·¥π-assoc (f x B.+·¥π g x) (f y) (g y) ‚ü©
               (f x B.+·¥π g x) B.+·¥π (f y B.+·¥π g y)
                 ‚àé )
          , ( -- (f + g) 0 ‚âà 0
             begin‚ü® B.‚âà·¥π-setoid ‚ü©
              f A.0·¥π B.+·¥π g A.0·¥π ‚âà‚ü® B.+·¥π-cong f0 g0 ‚ü©
              B.0·¥π B.+·¥π B.0·¥π     ‚âà‚ü® B.+·¥π-identity ≥ B.0·¥π ‚ü©
              B.0·¥π               ‚àé)
          , ( -- (f + g) (s *‚Çó x) ‚âà s *‚Çó (f + g) x
             Œª s x ‚Üí
               begin‚ü® B.‚âà·¥π-setoid ‚ü©
                 f (s A.*‚Çó x) B.+·¥π g (s A.*‚Çó x)
                   ‚âà‚ü® B.+·¥π-cong (f* s x) (g* s x) ‚ü©
                 s B.*‚Çó f x B.+·¥π s B.*‚Çó g x
                   ‚âàÀò‚ü® B.*‚Çó-distribÀ° s (f x) (g x) ‚ü©
                 s B.*‚Çó (f x B.+·¥π g x)
                   ‚àé)
    ; ùüé = Œª {A B} ‚Üí let module B = LeftSemimodule B in
          const B.0·¥π
        , (Œª x y ‚Üí B.‚âà·¥π-sym (B.+·¥π-identity ≥ B.0·¥π))
        , B.‚âà·¥π-refl
        , (Œª s x ‚Üí B.‚âà·¥π-sym (B.*‚Çó-zero ≥ s))
    ; isPreadditive = record
        { ‚äπ-zero-isMonoid = Œª {A B} ‚Üí let module A = LeftSemimodule A
                                          module B = LeftSemimodule B
                                      in record  
           { isSemigroup = record
              { isMagma = record
                 { isEquivalence = Category.equiv lsm {A}{B}
                 ; ‚àô-cong = Œª f‚âàg h‚âài x‚âày ‚Üí B.+·¥π-cong (f‚âàg x‚âày) (h‚âài x‚âày)
                 }
              ; assoc = Œª (f‚Ä≤ , _) (g‚Ä≤ , _) (h‚Ä≤ , _) ‚Üí Œª {x y} x‚âày ‚Üí
                  let open Œ† f‚Ä≤ renaming (_‚ü®$‚ü©_ to f ; cong to f-cong)
                      open Œ† g‚Ä≤ renaming (_‚ü®$‚ü©_ to g ; cong to g-cong)
                      open Œ† h‚Ä≤ renaming (_‚ü®$‚ü©_ to h ; cong to h-cong)
                  in
                    begin‚ü® B.‚âà·¥π-setoid ‚ü©
                      (f x B.+·¥π g x) B.+·¥π h x ‚âà‚ü® B.+·¥π-assoc (f x) (g x) (h x)‚ü©
                      f x B.+·¥π (g x B.+·¥π h x) ‚âà‚ü® B.+·¥π-cong (f-cong x‚âày)
                                                   (B.+·¥π-cong (g-cong x‚âày)
                                                              (h-cong x‚âày)) ‚ü©
                      f y B.+·¥π (g y B.+·¥π h y) ‚àé
              }
           ; identity = (Œª (f‚Ä≤ , _) {x y} x‚âày ‚Üí
                            let open Œ† f‚Ä≤ renaming (_‚ü®$‚ü©_ to f; cong to f-cong) in
                            begin‚ü® B.‚âà·¥π-setoid ‚ü©
                              B.0·¥π B.+·¥π f x ‚âà‚ü® B.+·¥π-identityÀ° (f x) ‚ü©
                              f x ‚âà‚ü® f-cong x‚âày ‚ü©
                              f y  ‚àé)
                      , (Œª (f‚Ä≤ , _) {x y} x‚âày ‚Üí
                            let open Œ† f‚Ä≤ renaming (_‚ü®$‚ü©_ to f; cong to f-cong) in
                            begin‚ü® B.‚âà·¥π-setoid ‚ü©
                              f x B.+·¥π B.0·¥π ‚âà‚ü® B.+·¥π-identity ≥ (f x) ‚ü©
                              f x ‚âà‚ü® f-cong x‚âày ‚ü©
                              f y  ‚àé)
           }
        -- distrib-‚äπÀ° : ‚àÄ {A B C} {f g : A ‚áí B} {h : B ‚áí C} ‚Üí h ‚àò (f ‚äπ g) ‚âà (h ‚àò f) ‚äπ (h ‚àò g)
        ; distrib-‚äπÀ° = Œª {A B C} {(f‚Ä≤ , _) (g‚Ä≤ , _) (h‚Ä≤ , h+ , _)} {x y} x‚âày ‚Üí
            let module B = LeftSemimodule B
                module C = LeftSemimodule C
                open Œ† f‚Ä≤ renaming (_‚ü®$‚ü©_ to f ; cong to f-cong)
                open Œ† g‚Ä≤ renaming (_‚ü®$‚ü©_ to g ; cong to g-cong)
                open Œ† h‚Ä≤ renaming (_‚ü®$‚ü©_ to h ; cong to h-cong)
            in
            begin‚ü® C.‚âà·¥π-setoid ‚ü©
              h (f x B.+·¥π g x)     ‚âà‚ü® h+ (f x) (g x) ‚ü©
              h (f x) C.+·¥π h (g x) ‚âà‚ü® C.+·¥π-cong (h-cong (f-cong x‚âày))
                                                (h-cong (g-cong x‚âày)) ‚ü©
              h (f y) C.+·¥π h (g y) ‚àé
        -- distrib-‚äπ ≥ : ‚àÄ {A B C} {f g : B ‚áí C} {h : A ‚áí B} ‚Üí (f ‚äπ g) ‚àò h ‚âà (f ‚àò h) ‚äπ (g ‚àò h)
        ; distrib-‚äπ ≥ = Œª {A B C} {(f‚Ä≤ , _) (g‚Ä≤ , _) (h‚Ä≤ , _)} {x y} x‚âày ‚Üí
            let module C = LeftSemimodule C
                open Œ† f‚Ä≤ renaming (_‚ü®$‚ü©_ to f ; cong to f-cong)
                open Œ† g‚Ä≤ renaming (_‚ü®$‚ü©_ to g ; cong to g-cong)
                open Œ† h‚Ä≤ renaming (_‚ü®$‚ü©_ to h ; cong to h-cong)
            in
            begin‚ü® C.‚âà·¥π-setoid ‚ü©
              f (h x) C.+·¥π g (h x) ‚âà‚ü® C.+·¥π-cong (f-cong (h-cong x‚âày))
                                                (g-cong (h-cong x‚âày)) ‚ü©
              f (h y) C.+·¥π g (h y) ‚àé
        -- distrib-ùüéÀ° : ‚àÄ {A B C} {g : B ‚áí C} ‚Üí g ‚àò ùüé ‚âà ùüé {A} {C}
        ; distrib-ùüéÀ° = Œª {A B C} {(_ , _ , g0 , _)} x‚âày ‚Üí g0
        -- distrib-ùüé ≥ : ‚àÄ {A B C} {f : A ‚áí B} ‚Üí ùüé ‚àò f ‚âà ùüé {A} {C}
        ; distrib-ùüé ≥ = Œª {A B C} x‚âày ‚Üí ‚âà·¥π-refl C
        }
    }
  
  LeftSemimodules-PreadditiveCartesian : PreadditiveCartesian
  LeftSemimodules-PreadditiveCartesian = record
    { cartesian = LeftSemimodules-Cartesian
    ; preadditive = LSM-Preadditive
    -- unique-ùüé : ‚àÄ (f : ‚ä§ ‚áí A) ‚Üí ùüé ‚âà f
    ; unique-ùüé = Œª {A} (f‚Ä≤ , _ , f0 , _) {x y} x‚âày ‚Üí ‚âà·¥π-sym A f0
    -- ‚ü®‚ü©‚äπ‚ü®‚ü© : ‚àÄ {(f h : A ‚áí B} {g i : A ‚áí C} ‚Üí ‚ü® f , g ‚ü© ‚äπ ‚ü® h , i ‚ü© ‚âà ‚ü® f ‚äπ h , g ‚äπ i ‚ü©
    ; ‚ü®‚ü©‚äπ‚ü®‚ü© = Œª {A B C} {(f‚Ä≤  , _) (h‚Ä≤  , _) (g‚Ä≤  , _) (i‚Ä≤  , _)} {x y} x‚âày ‚Üí
       let B√óC = P.leftSemimodule B C
           module B   = LeftSemimodule B
           module C   = LeftSemimodule C
           module B√óC = LeftSemimodule B√óC
           open Œ† f‚Ä≤ renaming (_‚ü®$‚ü©_ to f ; cong to f-cong)
           open Œ† g‚Ä≤ renaming (_‚ü®$‚ü©_ to g ; cong to g-cong)
           open Œ† h‚Ä≤ renaming (_‚ü®$‚ü©_ to h ; cong to h-cong)
           open Œ† i‚Ä≤ renaming (_‚ü®$‚ü©_ to i ; cong to i-cong)
       in
         begin‚ü® B√óC.‚âà·¥π-setoid ‚ü©
           f x B.+·¥π h x , g x C.+·¥π i x
             ‚âà‚ü® B.+·¥π-cong (f-cong x‚âày) (h-cong x‚âày)
              , C.+·¥π-cong (g-cong x‚âày) (i-cong x‚âày) ‚ü©
           f y B.+·¥π h y , g y C.+·¥π i y ‚àé
    }

-- TODO: eliminate the redundant SubCat construction and associated imports.
-- Return to the style of Old.Algebraic2
        
